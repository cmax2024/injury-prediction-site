quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_preview()
> quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_preview()
library(tidyverse)
library(caret)
library(pROC)
library(ggplot2)
# load data
sim_data <- read_csv("simulated_injury_data_relation.csv", show_col_types = FALSE)
# load data
sim_data <- read_csv("C:/Users/chopp/Documents/Eastern University/DTSC-691 Applied Data Science and Analytics/simulated_injury_data_relation.csv", show_col_types = FALSE)
# remove rows with missing injury or ACFT result
sim_data <- sim_data |> filter(!is.na(acft_result), !is.na(injury))
# recode
sim_data <- sim_data |>
mutate(
injury = as.integer(injury),
gender = as.factor(gender),
acft_binary = ifelse(acft_result == "Pass", 1, 0),
gender_male = ifelse(gender == "Male", 1, 0)
)
set.seed(42)
train_index <- createDataPartition(sim_data$injury, p = 0.8, list = FALSE)
train_data <- sim_data[train_index, ]
test_data <- sim_data[-train_index, ]
# Standardize age
age_mean <- mean(train_data$age)
age_sd <- sd(train_data$age)
train_data <- train_data |> mutate(age_z = (age - age_mean) / age_sd)
test_data <- test_data |> mutate(age_z = (age - age_mean) / age_sd)
ggplot(test_data, aes(x = pred_prob)) +
geom_histogram(binwidth = 0.02, fill = "steelblue", color = "white") +
geom_vline(xintercept = 0.5, linetype = "dashed", color = "red", size = 1) +
geom_vline(xintercept = opt_thresh, linetype = "dotted", color = "darkgreen", size = 1) +
labs(
title = "Distribution of Predicted Injury Probabilities",
x = "Predicted Probability",
y = "Count",
subtitle = "Red dashed = default threshold (0.5), Green dotted = optimal threshold"
) +
theme_minimal()
injury_model_scaled <- glm(
injury ~ age_z + gender + acft_binary,
data = train_data,
family = binomial(link = "logit")
)
summary(injury_model_scaled)
roc_obj <- roc(test_data$injury, test_data$pred_prob)
opt_thresh <- coords(roc_obj, x = "best", best.method = "youden", ret = "threshold")[[1]]
print(roc_obj)
print(opt_thresh)
test_data$pred_prob <- predict(injury_model_scaled, newdata = test_data, type = "response")
roc_obj <- roc(test_data$injury, test_data$pred_prob)
opt_thresh <- coords(roc_obj, x = "best", best.method = "youden", ret = "threshold")[[1]]
print(roc_obj)
print(opt_thresh)
ggplot(test_data, aes(x = pred_prob)) +
geom_histogram(binwidth = 0.02, fill = "steelblue", color = "white") +
geom_vline(xintercept = 0.5, linetype = "dashed", color = "red", size = 1) +
geom_vline(xintercept = opt_thresh, linetype = "dotted", color = "darkgreen", size = 1) +
labs(
title = "Distribution of Predicted Injury Probabilities",
x = "Predicted Probability",
y = "Count",
subtitle = "Red dashed = default threshold (0.5), Green dotted = optimal threshold"
) +
theme_minimal()
ggsave("injury_distribution.png", width = 6, height = 4, dpi = 300)
sample_df <- test_data[sample_rows, ] |>
mutate(
correct = ifelse(pred_class_opt == injury, "Correct", "Incorrect"),
row_id = paste0("Trainee_", row_number())  # or just as.character(row_number())
)
# Create the plot
ggplot(sample_df, aes(x = row_id, y = pred_prob, fill = correct)) +
geom_col() +
geom_hline(yintercept = opt_thresh, linetype = "dashed", color = "red") +
labs(
title = "Predicted Probabilities of Injury for 5 Random Trainees",
x = "Sample Trainees",
y = "Predicted Probability",
fill = "Prediction Match",
subtitle = paste0("Red dashed = threshold (", round(opt_thresh, 3), ")")
) +
theme_minimal()
# create predicted class
test_data <- test_data |>
mutate(pred_class_opt = ifelse(pred_prob >= opt_thresh, 1, 0))
set.seed(42)
sample_rows <- sample(nrow(test_data), 5)  # pick 5 random rows
# view selected rows with actual, predicted, and probability
test_data[sample_rows, c("age", "gender", "acft_binary", "injury", "pred_prob", "pred_class_opt")]
ggplot(test_data, aes(x = pred_prob)) +
geom_histogram(binwidth = 0.02, fill = "steelblue", color = "white") +
geom_vline(xintercept = 0.5, linetype = "dashed", color = "red", size = 1) +
geom_vline(xintercept = opt_thresh, linetype = "dotted", color = "darkgreen", size = 1) +
labs(
title = "Distribution of Predicted Injury Probabilities",
x = "Predicted Probability",
y = "Count",
subtitle = "Red dashed = default threshold (0.5), Green dotted = optimal threshold"
) +
theme_minimal()
ggplot(test_data, aes(x = pred_prob)) +
geom_histogram(binwidth = 0.02, fill = "steelblue", color = "white") +
geom_vline(xintercept = 0.5, linetype = "dashed", color = "red", size = 1) +
geom_vline(xintercept = opt_thresh, linetype = "dotted", color = "darkgreen", size = 1) +
labs(
title = "Distribution of Predicted Injury Probabilities",
x = "Predicted Probability",
y = "Count",
subtitle = "Red dashed = default threshold (0.5), Green dotted = optimal threshold"
) +
theme_minimal()
ggsave("injury_distribution.png", width = 6, height = 4, dpi = 300)
injury_dist <- ggplot(test_data, aes(x = pred_prob)) +
geom_histogram(binwidth = 0.02, fill = "steelblue", color = "white") +
geom_vline(xintercept = 0.5, linetype = "dashed", color = "red", size = 1) +
geom_vline(xintercept = opt_thresh, linetype = "dotted", color = "darkgreen", size = 1) +
labs(
title = "Distribution of Predicted Injury Probabilities",
x = "Predicted Probability",
y = "Count",
subtitle = "Red dashed = default threshold (0.5), Green dotted = optimal threshold"
) +
theme_minimal()
# Save
ggsave("injury_distribution.png", plot = injury_dist, width = 6, height = 4, dpi = 300)
quarto::quarto_preview()
shiny::runApp("InjuryPredictionApplication")
quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_preview()
quarto::quarto_preview()
> quarto::quarto_preview()
quarto::quarto_preview()
quarto render
